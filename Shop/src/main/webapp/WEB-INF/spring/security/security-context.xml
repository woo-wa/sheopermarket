<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util.xsd">
	<!-- 정적 리소스 파일들에는 보안 설정을 하지 않음 -->
	<http pattern="/tiles/**" security="none" />
	<http auto-config="true" use-expressions="true"
		create-session="never">
		
		<!-- <headers>
			<frame-options policy="SAMEORIGIN" />iframe 안되는걸 방지
		</headers> -->

		<!-- 관리자 영역 설정 -->
		<intercept-url pattern="/admin/**"	access="hasRole('ROLE_ADMIN')" />
		<!-- 권한에 관계없이 접속 가능한 영역(guest도 접속 가능) -->
		<intercept-url pattern="/user/**" access="permitAll" />
		<!-- 로그인한 사용자 영역 -->
		
		<!-- 로그인 폼 -->
		<form-login login-page="/user/login.do"
			login-processing-url="/user/login_check.do"
			authentication-success-handler-ref="userLoginSuccessHandler"
			authentication-failure-handler-ref="userLoginFailureHandler"
			username-parameter="userid" password-parameter="passwd" />

		<logout logout-url="/user/logout" logout-success-url="/"
			invalidate-session="true" />

		<session-management invalid-session-url ="/user/login.do">
			<!-- max-sessuon="1" 동시 접속 막기 / expired-url 다중접속 시 세션 만료 후 이동 할 페이지 -->
			<concurrency-control max-sessions="1"
				expired-url="/user/login.do" />
			<!-- error-if-maximum-exceeded="true" -->
		</session-management>
		<access-denied-handler ref="userDeniedHandler" />
	</http>


	<beans:bean id="userDeniedHandler"
		class="com.dev.shop.service.UserDeniedHandler" />
		
	<beans:bean id="userLoginSuccessHandler"
		class="com.dev.shop.service.UserLoginSuccessHandler" />
		
	<beans:bean id="userLoginFailureHandler" class="com.dev.shop.service.UserLoginFailureHandler"> 
			<beans:property name="loginid" value="userid"/>
			<beans:property name="loginpw" value="passwd"/>
			<beans:property name="errormsg" value="ERRORMSG"/>
			<beans:property name="defaultFailureUrl" value="/user/login.do?result=fail"/>
	</beans:bean>
	<!-- 로그인 인증을 처리하는 빈 -->
	<beans:bean id="userService"
		class="com.dev.shop.service.UserAuthenticationService">
		<beans:constructor-arg name="sqlSession"
			ref="sqlSession" />
	</beans:bean>

	<!-- 비밀번호 암호화를 위한 빈 -->
	<beans:bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans:beans>
